version: "3"

services:

  # backend:
  #   build:
  #     dockerfile: Dockerfile
  #     context: backend/
  #   ports: 
  #     - "8000:8000"
  #   command: >
  #     sh -c "python manage.py wait_for_db && 
  #            python manage.py migrate &&
  #            python manage.py runserver 0.0.0.0:8000"
  #   environment:
  #     - DB_HOST=db
  #     - DB_NAME=app
  #     - DB_USER=postgres
  #     - DB_PASS=supersecretpassword
  #   # volumes:
  #   #   - ./backend:/app
  #   depends_on:
  #     - db
  #     - frontend
  #     - rabbitmq

  frontend:
    build:
      dockerfile: Dockerfile
      context: frontend/
    # volumes:
    #   - ./frontend:/app/
      # - /app/node_modules
    ports:
      - "3000:3000"

  db:
    restart: always
    image: postgres:10-alpine
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=supersecretpassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/



  rabbitmq:
    image: rabbitmq:3.8-management
    restart: on-failure
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    ports:
      - "5672:5672"

  # celery:
  #   image: python:3.8-alpine
  #   restart: on-failure
  #   build:
  #     context: .
  #   depends_on:
  #     - db
  #     - rabbitmq
  #   command: sh -c "celery -A app worker -l INFO"


volumes:
  postgres_data:
